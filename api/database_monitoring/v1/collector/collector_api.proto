syntax = "proto3";
package database_monitoring.v1;
option go_package = "github.com/guilhermearpassos/database-monitoring/proto/database_monitoring/v1/collector;collectorv1";
import "database_monitoring/v1/collector/metrics.proto";
import "database_monitoring/v1/snapshot.proto";
import "database_monitoring/v1/execution_plan.proto";
import "database_monitoring/v1/sample.proto";

service IngestionService{
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  rpc IngestMetrics(DatabaseMetrics) returns (IngestMetricsResponse);
  rpc IngestSnapshot(IngestSnapshotRequest) returns (IngestSnapshotResponse);
  rpc IngestSnapshotSamples(IngestSnapshotSamplesRequest) returns (IngestSnapshotSamplesResponse);
  rpc IngestExecutionPlans(IngestExecutionPlansRequest) returns (IngestExecutionPlansResponse);
  rpc GetKnownPlanHandles(GetKnownPlanHandlesRequest) returns (GetKnownPlanHandlesResponse);
}

message GetKnownPlanHandlesRequest {
  ServerMetadata server = 1;
  int32 page_size = 2;
  int32 page_number = 3;
}

message GetKnownPlanHandlesResponse {
  repeated string handles = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_pages = 4;
}

message IngestExecutionPlansRequest{
  repeated ExecutionPlan plans = 1;
}
message IngestExecutionPlansResponse{

}

message RegisterAgentRequest{
  string target_host = 1;
  string target_type = 2;
  string agent_version = 3;
  repeated string tags = 4;
}

message RegisterAgentResponse{

}

message IngestMetricsResponse{
  bool success = 1;
  string message = 2;

}

message IngestSnapshotRequest{
  DBSnapshot snapshot = 1;
}


message IngestSnapshotResponse{
}
message IngestSnapshotSamplesRequest{
  string id = 1;
  repeated QuerySample samples = 5;
}
message IngestSnapshotSamplesResponse{

}