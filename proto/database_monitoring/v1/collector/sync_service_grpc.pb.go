// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: database_monitoring/v1/collector/sync_service.proto

package collectorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectorSyncService_SyncState_FullMethodName    = "/database_monitoring.v1.CollectorSyncService/SyncState"
	CollectorSyncService_GetPeerState_FullMethodName = "/database_monitoring.v1.CollectorSyncService/GetPeerState"
)

// CollectorSyncServiceClient is the client API for CollectorSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorSyncServiceClient interface {
	SyncState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StateUpdate, StateUpdate], error)
	GetPeerState(ctx context.Context, in *PeerStateRequest, opts ...grpc.CallOption) (*PeerStateResponse, error)
}

type collectorSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorSyncServiceClient(cc grpc.ClientConnInterface) CollectorSyncServiceClient {
	return &collectorSyncServiceClient{cc}
}

func (c *collectorSyncServiceClient) SyncState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StateUpdate, StateUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectorSyncService_ServiceDesc.Streams[0], CollectorSyncService_SyncState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateUpdate, StateUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorSyncService_SyncStateClient = grpc.BidiStreamingClient[StateUpdate, StateUpdate]

func (c *collectorSyncServiceClient) GetPeerState(ctx context.Context, in *PeerStateRequest, opts ...grpc.CallOption) (*PeerStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeerStateResponse)
	err := c.cc.Invoke(ctx, CollectorSyncService_GetPeerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorSyncServiceServer is the server API for CollectorSyncService service.
// All implementations must embed UnimplementedCollectorSyncServiceServer
// for forward compatibility.
type CollectorSyncServiceServer interface {
	SyncState(grpc.BidiStreamingServer[StateUpdate, StateUpdate]) error
	GetPeerState(context.Context, *PeerStateRequest) (*PeerStateResponse, error)
	mustEmbedUnimplementedCollectorSyncServiceServer()
}

// UnimplementedCollectorSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorSyncServiceServer struct{}

func (UnimplementedCollectorSyncServiceServer) SyncState(grpc.BidiStreamingServer[StateUpdate, StateUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SyncState not implemented")
}
func (UnimplementedCollectorSyncServiceServer) GetPeerState(context.Context, *PeerStateRequest) (*PeerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerState not implemented")
}
func (UnimplementedCollectorSyncServiceServer) mustEmbedUnimplementedCollectorSyncServiceServer() {}
func (UnimplementedCollectorSyncServiceServer) testEmbeddedByValue()                              {}

// UnsafeCollectorSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorSyncServiceServer will
// result in compilation errors.
type UnsafeCollectorSyncServiceServer interface {
	mustEmbedUnimplementedCollectorSyncServiceServer()
}

func RegisterCollectorSyncServiceServer(s grpc.ServiceRegistrar, srv CollectorSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectorSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectorSyncService_ServiceDesc, srv)
}

func _CollectorSyncService_SyncState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorSyncServiceServer).SyncState(&grpc.GenericServerStream[StateUpdate, StateUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorSyncService_SyncStateServer = grpc.BidiStreamingServer[StateUpdate, StateUpdate]

func _CollectorSyncService_GetPeerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorSyncServiceServer).GetPeerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorSyncService_GetPeerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorSyncServiceServer).GetPeerState(ctx, req.(*PeerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorSyncService_ServiceDesc is the grpc.ServiceDesc for CollectorSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database_monitoring.v1.CollectorSyncService",
	HandlerType: (*CollectorSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerState",
			Handler:    _CollectorSyncService_GetPeerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncState",
			Handler:       _CollectorSyncService_SyncState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "database_monitoring/v1/collector/sync_service.proto",
}
