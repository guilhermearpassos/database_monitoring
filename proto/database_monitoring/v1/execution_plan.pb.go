// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.1
// source: database_monitoring/v1/execution_plan.proto

package dbmv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanHandle string          `protobuf:"bytes,1,opt,name=plan_handle,json=planHandle,proto3" json:"plan_handle,omitempty"`
	Server     *ServerMetadata `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	XmlPlan    string          `protobuf:"bytes,3,opt,name=xml_plan,json=xmlPlan,proto3" json:"xml_plan,omitempty"`
}

func (x *ExecutionPlan) Reset() {
	*x = ExecutionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPlan) ProtoMessage() {}

func (x *ExecutionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPlan.ProtoReflect.Descriptor instead.
func (*ExecutionPlan) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutionPlan) GetPlanHandle() string {
	if x != nil {
		return x.PlanHandle
	}
	return ""
}

func (x *ExecutionPlan) GetServer() *ServerMetadata {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ExecutionPlan) GetXmlPlan() string {
	if x != nil {
		return x.XmlPlan
	}
	return ""
}

type ParsedExecutionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan       *ExecutionPlan    `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	StatsUsage []*StatisticsInfo `protobuf:"bytes,2,rep,name=stats_usage,json=statsUsage,proto3" json:"stats_usage,omitempty"`
	Warnings   []*PlanWarning    `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Nodes      []*PlanNode       `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ParsedExecutionPlan) Reset() {
	*x = ParsedExecutionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsedExecutionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedExecutionPlan) ProtoMessage() {}

func (x *ParsedExecutionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedExecutionPlan.ProtoReflect.Descriptor instead.
func (*ParsedExecutionPlan) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{1}
}

func (x *ParsedExecutionPlan) GetPlan() *ExecutionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *ParsedExecutionPlan) GetStatsUsage() []*StatisticsInfo {
	if x != nil {
		return x.StatsUsage
	}
	return nil
}

func (x *ParsedExecutionPlan) GetWarnings() []*PlanWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ParsedExecutionPlan) GetNodes() []*PlanNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type PlanNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EstimatedRows float64          `protobuf:"fixed64,2,opt,name=estimated_rows,json=estimatedRows,proto3" json:"estimated_rows,omitempty"`
	SubtreeCost   float64          `protobuf:"fixed64,3,opt,name=subtree_cost,json=subtreeCost,proto3" json:"subtree_cost,omitempty"`
	NodeCost      float64          `protobuf:"fixed64,4,opt,name=node_cost,json=nodeCost,proto3" json:"node_cost,omitempty"`
	Header        *PlanNode_Header `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Nodes         []*PlanNode      `protobuf:"bytes,7,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *PlanNode) Reset() {
	*x = PlanNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanNode) ProtoMessage() {}

func (x *PlanNode) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanNode.ProtoReflect.Descriptor instead.
func (*PlanNode) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{2}
}

func (x *PlanNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanNode) GetEstimatedRows() float64 {
	if x != nil {
		return x.EstimatedRows
	}
	return 0
}

func (x *PlanNode) GetSubtreeCost() float64 {
	if x != nil {
		return x.SubtreeCost
	}
	return 0
}

func (x *PlanNode) GetNodeCost() float64 {
	if x != nil {
		return x.NodeCost
	}
	return 0
}

func (x *PlanNode) GetHeader() *PlanNode_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlanNode) GetNodes() []*PlanNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type StatisticsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdate        string  `protobuf:"bytes,1,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	ModificationCount int64   `protobuf:"varint,2,opt,name=modification_count,json=modificationCount,proto3" json:"modification_count,omitempty"`
	SamplingPercent   float64 `protobuf:"fixed64,3,opt,name=sampling_percent,json=samplingPercent,proto3" json:"sampling_percent,omitempty"`
	Statistics        string  `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Table             string  `protobuf:"bytes,5,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *StatisticsInfo) Reset() {
	*x = StatisticsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsInfo) ProtoMessage() {}

func (x *StatisticsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsInfo.ProtoReflect.Descriptor instead.
func (*StatisticsInfo) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{3}
}

func (x *StatisticsInfo) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *StatisticsInfo) GetModificationCount() int64 {
	if x != nil {
		return x.ModificationCount
	}
	return 0
}

func (x *StatisticsInfo) GetSamplingPercent() float64 {
	if x != nil {
		return x.SamplingPercent
	}
	return 0
}

func (x *StatisticsInfo) GetStatistics() string {
	if x != nil {
		return x.Statistics
	}
	return ""
}

func (x *StatisticsInfo) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type PlanWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Warning:
	//
	//	*PlanWarning_Convert
	Warning isPlanWarning_Warning `protobuf_oneof:"warning"`
}

func (x *PlanWarning) Reset() {
	*x = PlanWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWarning) ProtoMessage() {}

func (x *PlanWarning) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWarning.ProtoReflect.Descriptor instead.
func (*PlanWarning) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{4}
}

func (m *PlanWarning) GetWarning() isPlanWarning_Warning {
	if m != nil {
		return m.Warning
	}
	return nil
}

func (x *PlanWarning) GetConvert() *PlanWarning_PlanAffectingConvert {
	if x, ok := x.GetWarning().(*PlanWarning_Convert); ok {
		return x.Convert
	}
	return nil
}

type isPlanWarning_Warning interface {
	isPlanWarning_Warning()
}

type PlanWarning_Convert struct {
	Convert *PlanWarning_PlanAffectingConvert `protobuf:"bytes,1,opt,name=convert,proto3,oneof"`
}

func (*PlanWarning_Convert) isPlanWarning_Warning() {}

type PlanNode_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalOp    string  `protobuf:"bytes,1,opt,name=physical_op,json=physicalOp,proto3" json:"physical_op,omitempty"`
	LogicalOp     string  `protobuf:"bytes,2,opt,name=logical_op,json=logicalOp,proto3" json:"logical_op,omitempty"`
	EstimateCpu   float64 `protobuf:"fixed64,3,opt,name=estimate_cpu,json=estimateCpu,proto3" json:"estimate_cpu,omitempty"`
	EstimateIo    float64 `protobuf:"fixed64,4,opt,name=estimate_io,json=estimateIo,proto3" json:"estimate_io,omitempty"`
	EstimateRows  float64 `protobuf:"fixed64,5,opt,name=estimate_rows,json=estimateRows,proto3" json:"estimate_rows,omitempty"`
	EstimatedCost float64 `protobuf:"fixed64,6,opt,name=estimated_cost,json=estimatedCost,proto3" json:"estimated_cost,omitempty"`
	Parallel      string  `protobuf:"bytes,7,opt,name=parallel,proto3" json:"parallel,omitempty"`
}

func (x *PlanNode_Header) Reset() {
	*x = PlanNode_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanNode_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanNode_Header) ProtoMessage() {}

func (x *PlanNode_Header) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanNode_Header.ProtoReflect.Descriptor instead.
func (*PlanNode_Header) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PlanNode_Header) GetPhysicalOp() string {
	if x != nil {
		return x.PhysicalOp
	}
	return ""
}

func (x *PlanNode_Header) GetLogicalOp() string {
	if x != nil {
		return x.LogicalOp
	}
	return ""
}

func (x *PlanNode_Header) GetEstimateCpu() float64 {
	if x != nil {
		return x.EstimateCpu
	}
	return 0
}

func (x *PlanNode_Header) GetEstimateIo() float64 {
	if x != nil {
		return x.EstimateIo
	}
	return 0
}

func (x *PlanNode_Header) GetEstimateRows() float64 {
	if x != nil {
		return x.EstimateRows
	}
	return 0
}

func (x *PlanNode_Header) GetEstimatedCost() float64 {
	if x != nil {
		return x.EstimatedCost
	}
	return 0
}

func (x *PlanNode_Header) GetParallel() string {
	if x != nil {
		return x.Parallel
	}
	return ""
}

type PlanWarning_PlanAffectingConvert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertIssue string `protobuf:"bytes,1,opt,name=convert_issue,json=convertIssue,proto3" json:"convert_issue,omitempty"`
	Expression   string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *PlanWarning_PlanAffectingConvert) Reset() {
	*x = PlanWarning_PlanAffectingConvert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanWarning_PlanAffectingConvert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanWarning_PlanAffectingConvert) ProtoMessage() {}

func (x *PlanWarning_PlanAffectingConvert) ProtoReflect() protoreflect.Message {
	mi := &file_database_monitoring_v1_execution_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanWarning_PlanAffectingConvert.ProtoReflect.Descriptor instead.
func (*PlanWarning_PlanAffectingConvert) Descriptor() ([]byte, []int) {
	return file_database_monitoring_v1_execution_plan_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PlanWarning_PlanAffectingConvert) GetConvertIssue() string {
	if x != nil {
		return x.ConvertIssue
	}
	return ""
}

func (x *PlanWarning_PlanAffectingConvert) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

var File_database_monitoring_v1_execution_plan_proto protoreflect.FileDescriptor

var file_database_monitoring_v1_execution_plan_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x25, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x78, 0x6d, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x78, 0x6d, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x13, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x47, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xf5, 0x03, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x1a, 0xf4, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x70, 0x75, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x1a, 0x5b, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x75, 0x69, 0x6c, 0x68, 0x65, 0x72, 0x6d,
	0x65, 0x61, 0x72, 0x70, 0x61, 0x73, 0x73, 0x6f, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x62, 0x6d, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_database_monitoring_v1_execution_plan_proto_rawDescOnce sync.Once
	file_database_monitoring_v1_execution_plan_proto_rawDescData = file_database_monitoring_v1_execution_plan_proto_rawDesc
)

func file_database_monitoring_v1_execution_plan_proto_rawDescGZIP() []byte {
	file_database_monitoring_v1_execution_plan_proto_rawDescOnce.Do(func() {
		file_database_monitoring_v1_execution_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_database_monitoring_v1_execution_plan_proto_rawDescData)
	})
	return file_database_monitoring_v1_execution_plan_proto_rawDescData
}

var file_database_monitoring_v1_execution_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_database_monitoring_v1_execution_plan_proto_goTypes = []any{
	(*ExecutionPlan)(nil),                    // 0: database_monitoring.v1.ExecutionPlan
	(*ParsedExecutionPlan)(nil),              // 1: database_monitoring.v1.ParsedExecutionPlan
	(*PlanNode)(nil),                         // 2: database_monitoring.v1.PlanNode
	(*StatisticsInfo)(nil),                   // 3: database_monitoring.v1.StatisticsInfo
	(*PlanWarning)(nil),                      // 4: database_monitoring.v1.PlanWarning
	(*PlanNode_Header)(nil),                  // 5: database_monitoring.v1.PlanNode.Header
	(*PlanWarning_PlanAffectingConvert)(nil), // 6: database_monitoring.v1.PlanWarning.PlanAffectingConvert
	(*ServerMetadata)(nil),                   // 7: database_monitoring.v1.ServerMetadata
}
var file_database_monitoring_v1_execution_plan_proto_depIdxs = []int32{
	7, // 0: database_monitoring.v1.ExecutionPlan.server:type_name -> database_monitoring.v1.ServerMetadata
	0, // 1: database_monitoring.v1.ParsedExecutionPlan.plan:type_name -> database_monitoring.v1.ExecutionPlan
	3, // 2: database_monitoring.v1.ParsedExecutionPlan.stats_usage:type_name -> database_monitoring.v1.StatisticsInfo
	4, // 3: database_monitoring.v1.ParsedExecutionPlan.warnings:type_name -> database_monitoring.v1.PlanWarning
	2, // 4: database_monitoring.v1.ParsedExecutionPlan.nodes:type_name -> database_monitoring.v1.PlanNode
	5, // 5: database_monitoring.v1.PlanNode.header:type_name -> database_monitoring.v1.PlanNode.Header
	2, // 6: database_monitoring.v1.PlanNode.nodes:type_name -> database_monitoring.v1.PlanNode
	6, // 7: database_monitoring.v1.PlanWarning.convert:type_name -> database_monitoring.v1.PlanWarning.PlanAffectingConvert
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_database_monitoring_v1_execution_plan_proto_init() }
func file_database_monitoring_v1_execution_plan_proto_init() {
	if File_database_monitoring_v1_execution_plan_proto != nil {
		return
	}
	file_database_monitoring_v1_snapshot_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_database_monitoring_v1_execution_plan_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_monitoring_v1_execution_plan_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ParsedExecutionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_monitoring_v1_execution_plan_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PlanNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_monitoring_v1_execution_plan_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StatisticsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_monitoring_v1_execution_plan_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PlanWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_monitoring_v1_execution_plan_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PlanNode_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_monitoring_v1_execution_plan_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PlanWarning_PlanAffectingConvert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_database_monitoring_v1_execution_plan_proto_msgTypes[4].OneofWrappers = []any{
		(*PlanWarning_Convert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_database_monitoring_v1_execution_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_database_monitoring_v1_execution_plan_proto_goTypes,
		DependencyIndexes: file_database_monitoring_v1_execution_plan_proto_depIdxs,
		MessageInfos:      file_database_monitoring_v1_execution_plan_proto_msgTypes,
	}.Build()
	File_database_monitoring_v1_execution_plan_proto = out.File
	file_database_monitoring_v1_execution_plan_proto_rawDesc = nil
	file_database_monitoring_v1_execution_plan_proto_goTypes = nil
	file_database_monitoring_v1_execution_plan_proto_depIdxs = nil
}
