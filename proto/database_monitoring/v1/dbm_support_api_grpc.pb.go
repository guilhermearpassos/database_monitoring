// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: database_monitoring/v1/dbm_support_api.proto

package dbmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBMSupportApi_ListDatabases_FullMethodName     = "/database_monitoring.v1.DBMSupportApi/ListDatabases"
	DBMSupportApi_PurgeQueryMetrics_FullMethodName = "/database_monitoring.v1.DBMSupportApi/PurgeQueryMetrics"
	DBMSupportApi_PurgeQueryPlans_FullMethodName   = "/database_monitoring.v1.DBMSupportApi/PurgeQueryPlans"
)

// DBMSupportApiClient is the client API for DBMSupportApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBMSupportApiClient interface {
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	PurgeQueryMetrics(ctx context.Context, in *PurgeQueryMetricsRequest, opts ...grpc.CallOption) (*PurgeQueryMetricsResponse, error)
	PurgeQueryPlans(ctx context.Context, in *PurgeQueryPlansRequest, opts ...grpc.CallOption) (*PurgeQueryPlansResponse, error)
}

type dBMSupportApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDBMSupportApiClient(cc grpc.ClientConnInterface) DBMSupportApiClient {
	return &dBMSupportApiClient{cc}
}

func (c *dBMSupportApiClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, DBMSupportApi_ListDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSupportApiClient) PurgeQueryMetrics(ctx context.Context, in *PurgeQueryMetricsRequest, opts ...grpc.CallOption) (*PurgeQueryMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeQueryMetricsResponse)
	err := c.cc.Invoke(ctx, DBMSupportApi_PurgeQueryMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSupportApiClient) PurgeQueryPlans(ctx context.Context, in *PurgeQueryPlansRequest, opts ...grpc.CallOption) (*PurgeQueryPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeQueryPlansResponse)
	err := c.cc.Invoke(ctx, DBMSupportApi_PurgeQueryPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBMSupportApiServer is the server API for DBMSupportApi service.
// All implementations must embed UnimplementedDBMSupportApiServer
// for forward compatibility.
type DBMSupportApiServer interface {
	ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	PurgeQueryMetrics(context.Context, *PurgeQueryMetricsRequest) (*PurgeQueryMetricsResponse, error)
	PurgeQueryPlans(context.Context, *PurgeQueryPlansRequest) (*PurgeQueryPlansResponse, error)
	mustEmbedUnimplementedDBMSupportApiServer()
}

// UnimplementedDBMSupportApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBMSupportApiServer struct{}

func (UnimplementedDBMSupportApiServer) ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedDBMSupportApiServer) PurgeQueryMetrics(context.Context, *PurgeQueryMetricsRequest) (*PurgeQueryMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueryMetrics not implemented")
}
func (UnimplementedDBMSupportApiServer) PurgeQueryPlans(context.Context, *PurgeQueryPlansRequest) (*PurgeQueryPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueryPlans not implemented")
}
func (UnimplementedDBMSupportApiServer) mustEmbedUnimplementedDBMSupportApiServer() {}
func (UnimplementedDBMSupportApiServer) testEmbeddedByValue()                       {}

// UnsafeDBMSupportApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBMSupportApiServer will
// result in compilation errors.
type UnsafeDBMSupportApiServer interface {
	mustEmbedUnimplementedDBMSupportApiServer()
}

func RegisterDBMSupportApiServer(s grpc.ServiceRegistrar, srv DBMSupportApiServer) {
	// If the following call pancis, it indicates UnimplementedDBMSupportApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBMSupportApi_ServiceDesc, srv)
}

func _DBMSupportApi_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSupportApiServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMSupportApi_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSupportApiServer).ListDatabases(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMSupportApi_PurgeQueryMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSupportApiServer).PurgeQueryMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMSupportApi_PurgeQueryMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSupportApiServer).PurgeQueryMetrics(ctx, req.(*PurgeQueryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMSupportApi_PurgeQueryPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueryPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSupportApiServer).PurgeQueryPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMSupportApi_PurgeQueryPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSupportApiServer).PurgeQueryPlans(ctx, req.(*PurgeQueryPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBMSupportApi_ServiceDesc is the grpc.ServiceDesc for DBMSupportApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBMSupportApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database_monitoring.v1.DBMSupportApi",
	HandlerType: (*DBMSupportApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatabases",
			Handler:    _DBMSupportApi_ListDatabases_Handler,
		},
		{
			MethodName: "PurgeQueryMetrics",
			Handler:    _DBMSupportApi_PurgeQueryMetrics_Handler,
		},
		{
			MethodName: "PurgeQueryPlans",
			Handler:    _DBMSupportApi_PurgeQueryPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database_monitoring/v1/dbm_support_api.proto",
}
