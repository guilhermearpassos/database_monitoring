// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: database_monitoring/v1/dbm_api.proto

package dbmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBMApi_ListSnapshots_FullMethodName         = "/database_monitoring.v1.DBMApi/ListSnapshots"
	DBMApi_ListSnapshotSummaries_FullMethodName = "/database_monitoring.v1.DBMApi/ListSnapshotSummaries"
	DBMApi_GetSnapshot_FullMethodName           = "/database_monitoring.v1.DBMApi/GetSnapshot"
	DBMApi_ListServerSummary_FullMethodName     = "/database_monitoring.v1.DBMApi/ListServerSummary"
	DBMApi_ListServers_FullMethodName           = "/database_monitoring.v1.DBMApi/ListServers"
	DBMApi_ListQueryMetrics_FullMethodName      = "/database_monitoring.v1.DBMApi/ListQueryMetrics"
	DBMApi_GetSampleDetails_FullMethodName      = "/database_monitoring.v1.DBMApi/GetSampleDetails"
	DBMApi_GetNormalizedQuery_FullMethodName    = "/database_monitoring.v1.DBMApi/GetNormalizedQuery"
)

// DBMApiClient is the client API for DBMApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBMApiClient interface {
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	ListSnapshotSummaries(ctx context.Context, in *ListSnapshotSummariesRequest, opts ...grpc.CallOption) (*ListSnapshotSummariesResponse, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error)
	ListServerSummary(ctx context.Context, in *ListServerSummaryRequest, opts ...grpc.CallOption) (*ListServerSummaryResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	ListQueryMetrics(ctx context.Context, in *ListQueryMetricsRequest, opts ...grpc.CallOption) (*ListQueryMetricsResponse, error)
	GetSampleDetails(ctx context.Context, in *GetSampleDetailsRequest, opts ...grpc.CallOption) (*GetSampleDetailsResponse, error)
	GetNormalizedQuery(ctx context.Context, in *GetNormalizedQueryRequest, opts ...grpc.CallOption) (*GetNormalizedQueryResponse, error)
}

type dBMApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDBMApiClient(cc grpc.ClientConnInterface) DBMApiClient {
	return &dBMApiClient{cc}
}

func (c *dBMApiClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, DBMApi_ListSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) ListSnapshotSummaries(ctx context.Context, in *ListSnapshotSummariesRequest, opts ...grpc.CallOption) (*ListSnapshotSummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotSummariesResponse)
	err := c.cc.Invoke(ctx, DBMApi_ListSnapshotSummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnapshotResponse)
	err := c.cc.Invoke(ctx, DBMApi_GetSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) ListServerSummary(ctx context.Context, in *ListServerSummaryRequest, opts ...grpc.CallOption) (*ListServerSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServerSummaryResponse)
	err := c.cc.Invoke(ctx, DBMApi_ListServerSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, DBMApi_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) ListQueryMetrics(ctx context.Context, in *ListQueryMetricsRequest, opts ...grpc.CallOption) (*ListQueryMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueryMetricsResponse)
	err := c.cc.Invoke(ctx, DBMApi_ListQueryMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) GetSampleDetails(ctx context.Context, in *GetSampleDetailsRequest, opts ...grpc.CallOption) (*GetSampleDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSampleDetailsResponse)
	err := c.cc.Invoke(ctx, DBMApi_GetSampleDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMApiClient) GetNormalizedQuery(ctx context.Context, in *GetNormalizedQueryRequest, opts ...grpc.CallOption) (*GetNormalizedQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNormalizedQueryResponse)
	err := c.cc.Invoke(ctx, DBMApi_GetNormalizedQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBMApiServer is the server API for DBMApi service.
// All implementations must embed UnimplementedDBMApiServer
// for forward compatibility.
type DBMApiServer interface {
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	ListSnapshotSummaries(context.Context, *ListSnapshotSummariesRequest) (*ListSnapshotSummariesResponse, error)
	GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error)
	ListServerSummary(context.Context, *ListServerSummaryRequest) (*ListServerSummaryResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	ListQueryMetrics(context.Context, *ListQueryMetricsRequest) (*ListQueryMetricsResponse, error)
	GetSampleDetails(context.Context, *GetSampleDetailsRequest) (*GetSampleDetailsResponse, error)
	GetNormalizedQuery(context.Context, *GetNormalizedQueryRequest) (*GetNormalizedQueryResponse, error)
	mustEmbedUnimplementedDBMApiServer()
}

// UnimplementedDBMApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBMApiServer struct{}

func (UnimplementedDBMApiServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedDBMApiServer) ListSnapshotSummaries(context.Context, *ListSnapshotSummariesRequest) (*ListSnapshotSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshotSummaries not implemented")
}
func (UnimplementedDBMApiServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedDBMApiServer) ListServerSummary(context.Context, *ListServerSummaryRequest) (*ListServerSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServerSummary not implemented")
}
func (UnimplementedDBMApiServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedDBMApiServer) ListQueryMetrics(context.Context, *ListQueryMetricsRequest) (*ListQueryMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueryMetrics not implemented")
}
func (UnimplementedDBMApiServer) GetSampleDetails(context.Context, *GetSampleDetailsRequest) (*GetSampleDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleDetails not implemented")
}
func (UnimplementedDBMApiServer) GetNormalizedQuery(context.Context, *GetNormalizedQueryRequest) (*GetNormalizedQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNormalizedQuery not implemented")
}
func (UnimplementedDBMApiServer) mustEmbedUnimplementedDBMApiServer() {}
func (UnimplementedDBMApiServer) testEmbeddedByValue()                {}

// UnsafeDBMApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBMApiServer will
// result in compilation errors.
type UnsafeDBMApiServer interface {
	mustEmbedUnimplementedDBMApiServer()
}

func RegisterDBMApiServer(s grpc.ServiceRegistrar, srv DBMApiServer) {
	// If the following call pancis, it indicates UnimplementedDBMApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBMApi_ServiceDesc, srv)
}

func _DBMApi_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_ListSnapshotSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).ListSnapshotSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_ListSnapshotSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).ListSnapshotSummaries(ctx, req.(*ListSnapshotSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_ListServerSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServerSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).ListServerSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_ListServerSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).ListServerSummary(ctx, req.(*ListServerSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_ListQueryMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).ListQueryMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_ListQueryMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).ListQueryMetrics(ctx, req.(*ListQueryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_GetSampleDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).GetSampleDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_GetSampleDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).GetSampleDetails(ctx, req.(*GetSampleDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMApi_GetNormalizedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNormalizedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMApiServer).GetNormalizedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBMApi_GetNormalizedQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMApiServer).GetNormalizedQuery(ctx, req.(*GetNormalizedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBMApi_ServiceDesc is the grpc.ServiceDesc for DBMApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBMApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database_monitoring.v1.DBMApi",
	HandlerType: (*DBMApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSnapshots",
			Handler:    _DBMApi_ListSnapshots_Handler,
		},
		{
			MethodName: "ListSnapshotSummaries",
			Handler:    _DBMApi_ListSnapshotSummaries_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _DBMApi_GetSnapshot_Handler,
		},
		{
			MethodName: "ListServerSummary",
			Handler:    _DBMApi_ListServerSummary_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _DBMApi_ListServers_Handler,
		},
		{
			MethodName: "ListQueryMetrics",
			Handler:    _DBMApi_ListQueryMetrics_Handler,
		},
		{
			MethodName: "GetSampleDetails",
			Handler:    _DBMApi_GetSampleDetails_Handler,
		},
		{
			MethodName: "GetNormalizedQuery",
			Handler:    _DBMApi_GetNormalizedQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database_monitoring/v1/dbm_api.proto",
}
